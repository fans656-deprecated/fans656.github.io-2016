一个数组的子数组是前后去掉一些元素后剩下的数组，比如 [-1, 2, 3] 的子数组是 [-1], [2], [3], [-1,2], [2,3], [-1,2,3]
最大子数组就是所有子数组中和最大的那个，比如
    sum([-1]) == -1
    sum([2]) == 2
    sum([3]) == 3
    sum([-1,2]) == 1
    sum([2,3]) == 5     # 最大子数组
    sum([-1,2,3]) == 4

《算法导论(Introduction to Algorithms)》的习题中有一个O(n)时间的算法

记数组a的所有子数组的集合为sub(a)，最大子数组就是这些数组中“最大”的那个——max(sub(a))
(这里的“最大”意思是和最大)

用a[b:e]来表示a的一个特定子数组，从下标b开始，到下标e为止(不包含)
比如
    a[0:1] == [0]
    a[1:3] == [2,3]

对于一个有n个元素的数组，b, e 的取值有 C(n, 2) 中
    
    b == 0, e == 1
    b == 0, e == 2
    ...
    b == 0, e == n
    b == 1, e == 2
    b == 1, e == 3
    ...
    b == 1, e == n
    ...
    b == n - 2, e == n - 1
    b == n - 2, e == n
    b == n - 1, e == n

分别表示了相应的子数组 a[b:e]

我们把这些子数组分为两类，一类是 e == n, b随便的，另一类是b和e都小于n的

    \pic{b e category}

把 e == n 的叫 sub_tail(a)
把 b, e < n 的叫 sub_left(a)

最大子数组由 max(sub(n)) 变成了 max(max(sub_left(n)), max(sub_tail(n)))
记
    left(n) := max(sub_left(n))
    tail(n) := max(sub_tail(n))

left(n) = max(left(n - 1), tail(n))
